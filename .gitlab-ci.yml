variables:
  PLATFORMS: "linux/arm64/v8,linux/amd64"
  COMPOSE_VERSION: "1.29.2"


build:
  image: docker:latest
  services:
    - docker:dind

  script:
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    - docker pull "${BASE_IMAGE}:${PYTHON_VERSION}" || true

    # Create a buildx instance if one doesn't already exist
    - if [ "$(docker buildx ls | grep docker-container  | wc -l)" -le "0" ]; then
        docker buildx create --use;
      fi

    - docker buildx build
        --platform "$PLATFORMS"
        --pull
        --build-arg BASE_IMAGE="$BASE_IMAGE"
        --build-arg UBUNTU_VERSION="$UBUNTU_VERSION"
        --build-arg DOCKER_VERSION="$DOCKER_VERSION"
        --build-arg COMPOSE_VERSION="$COMPOSE_VERSION"
        --cache-from "${CI_REGISTRY_IMAGE}:${OUTPUT_TAG_NAME}"
        --tag "${CI_REGISTRY_IMAGE}:${OUTPUT_TAG_NAME}"
        $EXTRA_BUILD_ARGS
        --push
        .

  parallel:
    matrix:
      - BASE_IMAGE: ubuntu
        UBUNTU_VERSION: "18.04"
        DOCKER_VERSION: "5:20.10.17~3-0~ubuntu-bionic"
        OUTPUT_TAG_NAME: "18.04"
        EXTRA_BUILD_ARGS: "--tag ${CI_REGISTRY_IMAGE}:bionic"

      - BASE_IMAGE: ubuntu
        UBUNTU_VERSION: "20.04"
        DOCKER_VERSION: "5:20.10.17~3-0~ubuntu-focal"
        OUTPUT_TAG_NAME: "20.04"
        EXTRA_BUILD_ARGS: "--tag ${CI_REGISTRY_IMAGE}:focal --tag ${CI_REGISTRY_IMAGE}:latest"

      # - BASE_IMAGE: ubuntu
      #   UBUNTU_VERSION: "22.04"
      #   DOCKER_VERSION: "5:20.10.17~3-0~ubuntu-jammy"
      #   OUTPUT_TAG_NAME: "22.04"
      #   EXTRA_BUILD_ARGS: "--tag ${CI_REGISTRY_IMAGE}:jammy --tag ${CI_REGISTRY_IMAGE}:latest"
